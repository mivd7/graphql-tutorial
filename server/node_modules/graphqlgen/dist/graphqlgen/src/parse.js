"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Ajv = require("ajv");
var chalk = require("chalk");
var fs = require("fs");
var yaml = require("js-yaml");
var schema = require("../../graphqlgen-json-schema/src/schema.json");
var path_helpers_1 = require("./path-helpers");
var graphql_1 = require("graphql");
var graphql_import_1 = require("graphql-import");
var ajv = new Ajv().addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));
var validateYaml = ajv.compile(schema);
function parseConfig() {
    if (!fs.existsSync('graphqlgen.yml')) {
        console.error(chalk.default.red("No graphqlgen.yml found"));
        process.exit(1);
    }
    var config = yaml.safeLoad(fs.readFileSync('graphqlgen.yml', 'utf-8'));
    if (!validateYaml(config)) {
        console.error(chalk.default.red("Invalid graphqlgen.yml file"));
        console.error(chalk.default.red(printErrors(validateYaml.errors)));
        process.exit(1);
    }
    return config;
}
exports.parseConfig = parseConfig;
function printErrors(errors) {
    return errors
        .map(function (e) {
        var params = Object.keys(e.params)
            .map(function (key) { return key + ": " + e.params[key]; })
            .join(', ');
        return e.dataPath + " " + e.message + ". " + params;
    })
        .join('\n');
}
function parseContext(context, outputDir) {
    if (!context) {
        return undefined;
    }
    var _a = context.split(':'), filePath = _a[0], interfaceName = _a[1];
    return {
        contextPath: path_helpers_1.getImportPathRelativeToOutput(filePath, outputDir),
        interfaceName: interfaceName,
    };
}
exports.parseContext = parseContext;
function parseSchema(schemaPath) {
    if (!fs.existsSync(schemaPath)) {
        console.error(chalk.default.red("The schema file " + schemaPath + " does not exist"));
        process.exit(1);
    }
    var schema = undefined;
    try {
        schema = graphql_import_1.importSchema(schemaPath);
    }
    catch (e) {
        console.error(chalk.default.red("Error occurred while reading schema: " + e));
        process.exit(1);
    }
    var parsedSchema = undefined;
    try {
        parsedSchema = graphql_1.parse(schema);
    }
    catch (e) {
        console.error(chalk.default.red("Failed to parse schema: " + e));
        process.exit(1);
    }
    return parsedSchema;
}
exports.parseSchema = parseSchema;
function parseModels(modelsConfig, outputDir, language) {
    return Object.keys(modelsConfig).reduce(function (acc, typeName) {
        var _a;
        var modelConfig = modelsConfig[typeName];
        var _b = modelConfig.split(':'), filePath = _b[0], modelName = _b[1];
        var absoluteFilePath = path_helpers_1.getAbsoluteFilePath(filePath, language);
        var importPathRelativeToOutput = path_helpers_1.getImportPathRelativeToOutput(absoluteFilePath, outputDir);
        return __assign({}, acc, (_a = {}, _a[typeName] = {
            absoluteFilePath: absoluteFilePath,
            importPathRelativeToOutput: importPathRelativeToOutput,
            modelTypeName: modelName,
        }, _a));
    }, {});
}
exports.parseModels = parseModels;
//# sourceMappingURL=parse.js.map