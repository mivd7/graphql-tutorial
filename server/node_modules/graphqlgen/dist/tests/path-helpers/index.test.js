"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_helpers_1 = require("../../path-helpers");
var path_1 = require("path");
var utils_1 = require("../../utils");
var relative = function (p) { return path_1.join(__dirname, p); };
var language = 'typescript';
test('invalid path', function () {
    expect(function () {
        return path_helpers_1.getAbsoluteFilePath(path_1.join('../fixtures/type.ts'), language);
    }).toThrow();
});
test('valid path', function () {
    expect(path_helpers_1.getAbsoluteFilePath(path_1.join(__dirname, '../fixtures/basic/index.ts'), language)
        .split('/')
        .slice(-4)).toMatchSnapshot();
});
test('valid directory path', function () {
    expect(path_helpers_1.getAbsoluteFilePath(relative('../fixtures/basic/'), language)
        .split('/')
        .slice(-4)).toMatchSnapshot();
});
test('valid directory path without slash', function () {
    expect(path_helpers_1.getAbsoluteFilePath(relative('../fixtures/basic'), language)
        .split('/')
        .slice(-4)).toMatchSnapshot();
});
test('normalizeFilePath()', function () {
    // '/path/to/file.ts' => '/path/to/file.ts'
    expect(utils_1.normalizeFilePath(relative('./mocks/types.ts'), language)).toEqual(path_1.resolve(relative('./mocks/types.ts')));
    // '/path/to/file' => '/path/to/file.ts'
    expect(utils_1.normalizeFilePath(relative('./mocks/types'), language)).toEqual(path_1.resolve(relative('./mocks/types.ts')));
    // '/path/to/file' => '/path/to/file/index.ts'
    expect(utils_1.normalizeFilePath(relative('./mocks/dir-1'), language)).toEqual(path_1.resolve(relative('./mocks/dir-1/index.ts')));
    // '/path/to/file' => '/path/to/file.ts'
    // Even though there is a folder of the same name
    expect(utils_1.normalizeFilePath(relative('./mocks/dir-2/dir-3'), language)).toEqual(path_1.resolve(relative('./mocks/dir-2/dir-3.ts')));
});
//# sourceMappingURL=index.test.js.map