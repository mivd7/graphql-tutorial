"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var validation_1 = require("../../validation");
var parse_1 = require("../../parse");
var relative = function (p) { return path_1.join(__dirname, p); };
var language = 'typescript';
function testValidateModels(config, expectedResult) {
    var schema = parse_1.parseSchema(config.schema);
    console.log = jest.fn();
    expect(validation_1.validateModels(config.models, schema, language)).toBe(expectedResult);
    if (!expectedResult) {
        expect(console.log).toHaveBeenCalled();
    }
}
describe('test validateModels()', function () {
    test('missing models', function () {
        testValidateModels({
            schema: relative('./mocks/missingModels/schema.graphql'),
            models: {
                files: [relative('./mocks/missingModels/index.ts')],
            },
        }, false);
    });
    test('invalid files', function () {
        testValidateModels({
            schema: relative('./mocks/missingModels/schema.graphql'),
            models: {
                files: [relative('./mocks/missingModels/typesB.ts')],
            },
        }, false);
    });
    test('evaluate overriden model', function () {
        testValidateModels({
            schema: relative('./mocks/overridenModel/schema.graphql'),
            models: {
                files: [relative('./mocks/overridenModel/types.ts')],
                override: {
                    Post: relative('./mocks/overridenModel/model.ts:PostModel')
                }
            },
        }, true);
    });
    test('invalid overriden models', function () {
        testValidateModels({
            schema: relative('./mocks/overridenModel/schema.graphql'),
            models: {
                files: [relative('./mocks/overridenModel/types.ts')],
                override: {
                    Post: relative('./mocks/overridenModel/model.ts:Post')
                }
            },
        }, false);
    });
});
//# sourceMappingURL=validateModels.test.js.map